{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"EasySFX <p>     EasySFX Is a sound effect management module built with simplicity in mind.    </p> Get Started Documentation Get Module"},{"location":"api/documentation/","title":"Documentation","text":""},{"location":"api/documentation/#easysfx-documentation","title":"EasySFX Documentation","text":"<p>Easy to understand explanation of the module's functions and usage.</p>"},{"location":"api/documentation/#easysfxloggingvalue-boolean","title":"<code>EasySFX.Logging(value: Boolean)</code>","text":"<p>Enables logging for debugging purposes (Disabled by default).</p> <ul> <li> <p><code>value: Boolean</code>: The value to set logging to.</p> <ul> <li> <p>Returns: Nothing.</p> </li> <li> <p>Example:</p> <pre><code>local EasySFX = require(game.ReplicatedStorage.EasySFX)\nEasySFX.Logging(true)\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#easysfxloadaudio-sound","title":"<code>EasySFX:Load(audio: Sound)</code>","text":"<p>Loads a sound into the EasySFX module, enabling sound effect management.</p> <ul> <li> <p><code>audio: Sound</code>: The Roblox <code>Sound</code> object to load.</p> <ul> <li> <p>Returns: An EasySFX object containing the module's functions for the specified sound. Returns <code>nil</code> if the provided <code>audio</code> is not a <code>Sound</code> object.</p> </li> <li> <p>Example:</p> <pre><code>local EasySFX = require(game.ReplicatedStorage.EasySFX)\nlocal soundObj = workspace.MySound\nlocal sound = EasySFX:Load(soundObj)\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundsound","title":"<code>sound.Sound</code>","text":"<ul> <li> <p>Reference back to SoundObj (Mostly for cleaner code, no real purpose.)</p> <ul> <li> <p>Example:</p> <pre><code>local sound = EasySFX:Load(soundObj)\nsound.Sound -- Access to SoundObj\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#sounddestroy","title":"<code>sound.Destroy()</code>","text":"<p>Unloads the sound from the module and destroys the sound object.</p> <ul> <li> <p>Returns: <code>true</code> on success, <code>nil</code> otherwise.</p> <ul> <li> <p>Example:</p> <pre><code>local sound = EasySFX:Load(soundObj)\nsound.Destroy()\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundunload","title":"<code>sound.Unload()</code>","text":"<p>Unloads the sound from the module and removes all applied sound effects.</p> <ul> <li> <p>Returns: <code>true</code> on success, <code>nil</code> otherwise.</p> <ul> <li> <p>Example:</p> <pre><code>local sound = EasySFX:Load(soundObj)\nsound.Unload()\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundonunloadfunction-any","title":"<code>sound.OnUnload(Function: (any?))</code>","text":"<p>Registers a function to be executed when the sound is unloaded from the module.</p> <ul> <li> <p><code>Function: (any?)</code>: The function to execute on unload.</p> <ul> <li> <p>Returns: Nothing.</p> </li> <li> <p>Example:</p> <p><pre><code>local sound = EasySFX:Load(soundObj)\nsound.OnUnload(function()\n    print(\"Sound unloaded!\")\nend)\nsound.Unload()\n</code></pre> OUTPUT:<pre><code>\"Sound unloaded!\"\n</code></pre></p> </li> </ul> </li> </ul> <p>.Destroy() also executes functions fed to .OnUnload()</p> <p>.OnUnload() must be called before .Unload()</p> <p>If you call .OnUnload() after .Unload() your function wont fire.</p>"},{"location":"api/documentation/#soundremoveeffecteffect-instance","title":"<code>sound.RemoveEffect(effect: Instance?)</code>","text":"<p>Removes a sound effect from the loaded sound.</p> <ul> <li> <p><code>effect: Instance?</code>: The sound effect instance to remove.</p> <ul> <li> <p>Returns: <code>true</code> if the effect was successfully removed, <code>nil</code> otherwise.</p> </li> <li> <p>Example:</p> <pre><code>local reverbEffect = sound:Reverb()\nsound.RemoveEffect(reverbEffect)\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundgeteffects-string-instance","title":"<code>sound.GetEffects(): {[string]: Instance}</code>","text":"<p>Retrieves the sound effect instances currently applied to the loaded sound.</p> <ul> <li> <p>Returns: A table where the keys are the names of the sound effects, and the values are the corresponding sound effect instances. Returns an empty table if there are no effects.</p> <ul> <li> <p>Example:</p> <pre><code>local effects = sound.GetEffects()\nfor name, effect in pairs(effects) do\n    print(name, effect)\nend\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundgeteffectnames-number-string","title":"<code>sound.GetEffectNames(): {[number]: string}</code>","text":"<p>Retrieves the names of the sound effects currently applied to the loaded sound.</p> <ul> <li> <p>Returns: A table containing the names (strings) of the sound effects. Returns an empty table if there are no effects.</p> <ul> <li> <p>Example:</p> <pre><code>local effectNames = sound.GetEffectNames()\nfor i, name in ipairs(effectNames) do\n    print(i, name)\nend\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundreverbproperties-reverbproperties","title":"<code>sound:Reverb(properties: reverbProperties)</code>","text":"<p>Applies a reverb effect to the loaded sound or returns an existing reverb effect.</p> <ul> <li> <p><code>properties: reverbProperties</code>: An optional table containing reverb properties.</p> <ul> <li> <p>Returns: The <code>ReverbSoundEffect</code> instance.</p> </li> <li> <p>Example:</p> <pre><code>local reverb = sound:Reverb({\n    DryLevel = 0,\n    WetLevel = -10\n})\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundechoproperties-echoproperties","title":"<code>sound:Echo(properties: echoProperties)</code>","text":"<p>Applies an echo effect to the loaded sound or returns an existing echo effect.</p> <ul> <li> <p><code>properties: echoProperties</code>: An optional table containing echo properties.</p> <ul> <li> <p>Returns: The <code>EchoSoundEffect</code> instance.</p> </li> <li> <p>Example:</p> <pre><code>local echo = sound:Echo({\n    Delay = 0.2,\n    Decay = 0.5\n})\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundequalizerproperties-equalizerproperties","title":"<code>sound:Equalizer(properties: equalizerProperties)</code>","text":"<p>Applies an equalizer effect to the loaded sound or returns an existing equalizer effect.</p> <ul> <li> <p><code>properties: equalizerProperties</code>: An optional table containing equalizer properties.</p> <ul> <li> <p>Returns: The <code>EqualizerSoundEffect</code> Instance.</p> </li> <li> <p>Example:</p> <pre><code>local equalizer = sound:Equalizer({\n    LowGain = 0.8,\n    HighGain = -0.5\n})\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundcompressorproperties-compressorproperties","title":"<code>sound:Compressor(properties: compressorProperties)</code>","text":"<p>Applies a compressor effect to the loaded sound, or returns an existing one.</p> <ul> <li> <p><code>properties: compressorProperties</code>: Optional table of compressor properties.</p> <ul> <li> <p>Returns: The <code>CompressorSoundEffect</code> instance.</p> </li> <li> <p>Example:</p> <pre><code>local compressor = sound:Compressor({\n    Threshold = -20,\n    Ratio = 4\n})\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundchorusproperties-chorusproperties","title":"<code>sound:Chorus(properties: chorusProperties)</code>","text":"<p>Applies a chorus effect to the loaded sound or returns an existing chorus effect.</p> <ul> <li> <p><code>properties: chorusProperties</code>: An optional table containing chorus properties.</p> <ul> <li> <p>Returns: The <code>ChorusSoundEffect</code> instance.</p> </li> <li> <p>Example:</p> <pre><code>local chorus = sound:Chorus({\n    Depth = 0.7,\n    Rate = 5\n})\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundtremoloproperties-tremoloproperties","title":"<code>sound:Tremolo(properties: tremoloProperties)</code>","text":"<p>Applies a tremolo effect to the loaded sound or returns an existing tremolo effect.</p> <ul> <li> <p><code>properties: tremoloProperties</code>: An optional table containing tremolo properties.</p> <ul> <li> <p>Returns: The <code>TremoloSoundEffect</code> instance.</p> </li> <li> <p>Example:</p> <pre><code>local tremolo = sound:Tremolo({\n   Frequency = 10,\n   Depth = 0.6\n})\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#sounddistortionproperties-distortionproperties","title":"<code>sound:Distortion(properties: distortionProperties)</code>","text":"<p>Applies a distortion effect to the loaded sound or returns an existing distortion effect.</p> <ul> <li> <p><code>properties: distortionProperties</code>: An optional table containing distortion properties.</p> <ul> <li> <p>Returns: The <code>DistortionSoundEffect</code> instance.</p> </li> <li> <p>Example:</p> <pre><code>local distortion = sound:Distortion({\n    Gain = 0.9\n})\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundpitchshiftproperties-pitchshiftproperties","title":"<code>sound:PitchShift(properties: pitchshiftProperties)</code>","text":"<p>Applies a pitch shift effect to the loaded sound.</p> <ul> <li> <p><code>properties: pitchshiftProperties</code>: A table containing pitch shift properties.</p> <ul> <li> <p>Returns: The <code>PitchShiftSoundEffect</code> instance.</p> </li> <li> <p>Example:</p> <pre><code>local pitchShift = sound:PitchShift({\n    Octave = 1,\n    Pitch = 0.5\n})\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/documentation/#soundflangeproperties-flangeproperties","title":"<code>sound:Flange(properties: flangeProperties)</code>","text":"<p>Applies a flange effect to the loaded sound or returns an existing flange effect.</p> <ul> <li> <p><code>properties: flangeProperties</code>: An optional table containing flange properties.</p> <ul> <li> <p>Returns: The <code>FlangeSoundEffect</code> instance.</p> </li> <li> <p>Example:</p> <pre><code>local flange = sound:Flange({\n    Depth = 0.4,\n    Rate = 8\n})\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api/getting-started/","title":"Getting Started","text":""},{"location":"api/getting-started/#installation","title":"Installation","text":"<p>Installing EasySFX is very easy:</p> <ol> <li>Grab the module from here.</li> <li>Drop it into <code>ReplicatedStorage</code>.</li> <li>Initiate it in your script like so:</li> </ol> LocalScript<pre><code>local EasySFX = require(game.ReplicatedStorage.EasySFX) -- Import the EasySFX module.\nlocal soundObj = script.Sound --  Reference your Sound object.\nlocal sound = EasySFX:Load(soundObj) -- Load a sound into EasySFX (Returns EasySFX object).\n</code></pre>"},{"location":"api/getting-started/#introduction","title":"Introduction","text":"<p>Once you've loaded a sound, you can apply effects to it. Here's how:</p> LocalScript<pre><code>local EasySFX = require(game.ReplicatedStorage.EasySFX)\nlocal soundObj = script.Sound\nlocal sound = EasySFX:Load(soundObj) -- (Loaded EasySFX object)\n\n-- Apply effects (Returns effect instance):\nlocal sound_Echo = sound:Echo() -- Add echo.\n\n-- Apply effects with properties (applies before parenting):\nlocal sound_Reverb = sound:Reverb({\n    DryLevel = 1,\n    WetLevel = -2\n})\n\n-- Apply properties **after** initializing the effect:\nsound_Echo.DryLevel = 0\n\n-- Remove an effect:\nsound.RemoveEffect(sound_Echo) -- Remove the echo effect.\n\n-- Unload the sound and remove all effects:\nsound.Unload() -- Unload the sound. Returns true on success, nil otherwise.\n</code></pre>"},{"location":"api/getting-started/#example","title":"Example","text":"<p>LocalScript<pre><code>local EasySFX = require(game.ReplicatedStorage.EasySFX)\nlocal soundObj = script.Sound\nlocal sound = EasySFX:Load(soundObj)\n\n-- Chaining multiple effects:\nlocal sound_Reverb = sound:Reverb({ DryLevel = 0, WetLevel = -6 })\nlocal sound_Distortion = sound:Distortion({ Gain = 0.8 })\nlocal sound_Chorus = sound:Chorus({ Depth = 0.5, Rate = 10 })\n\n-- Using OnUnload to clean up:\nsound.Sound.Ended:Connect(function()\n    print(\"Sound ended, unloading effects\")\n    sound.OnUnload(function() -- Call OnUnload() BEFORE Unloading for it to work.\n        print(\"Successfully unloaded\")\n    end)\n    sound.Unload()\nend)\n</code></pre> OUTPUT:<pre><code>\"Successfully unloaded\" - LocalScript\n</code></pre></p>"}]}